prune.hat = predict(prune.car, newdata = test)
MSE.cv = mean((prune.hat-test$Sales)^2)
paste("Optimal Level of tree complexity:",best.size)
paste("Prunedtest MSE",MSE.cv)
```
###(d) Use the bagging approach in order to analyze the data. What test MSE do you obtain? Use the importnace() function to determine which variables are most important.
The importance function shows that "Comp Price","Income",and "Advertising" are the tree most important variables. Furthermore, the test MSE shown is significantly smaller than that of the regular tree model.
```{r,echo=FALSE}
bag.car = randomForest(Sales~.,
data = train,
mtry=10,
importance = T)
importance(bag.car)
yhat.bag = predict(bag.car,newdata=test)
paste("Bagging Test MSE:",mean((yhat.bag-test$Sales)^2))
```
###(e) Use random forests to analyze this data. What test MSE do you obtain? Use the importance() function to determine which variables are most important. Describe the effect of m, the number of variables considered at each split, on the error rate obtained.
You can see by the table the different error rates corresponding to a variety of m values. The lowest error rate is also shown below. The m values affect the range of MSE from around 2.5 to 5.
```{r,echo=FALSE}
error= c()
for(i in 1:10){
forest.car = randomForest(Sales~.,
data = train,
mtry=i,
importance = T)
yhat.forest = predict(forest.car,newdata=test)
error = c(error,mean((yhat.forest-test$Sales)^2))
}
cbind(m_value=1:10,error)
paste("Minimum test MSE:", min(error))
```
It is again shown by the importance function that "CompPrice", "Income", and "Advertising" are the tree most important variables.
```{r,echo=F}
importance(forest.car)
```
#Chapter 8 Applied 9
###(a) Create a training set containing a random sample of 800 observations, and a test set containing the remaining observations.
I used the sequence fucntion to create my training and test set.
```{r, echo=TRUE}
set.seed(2)
oj = OJ
oj.subset = sample(1:1070, 800)
oj.train = oj[oj.subset,]
oj.test = oj[-oj.subset,]
```
###(b) Fit a tree to the training data, with Purchase as the response and the other vaiables except for Buy as predictors. Use the summary() function to produce summary statistics about the tree, and describe the results obtained. What ist he training error rate? How many terminal nodes does the tree have?
Below you can see the summary statistics, variables used, training error rate, and number of terminal nodes.
```{r, echo=FALSE}
tree.oj = tree(Purchase~.,data = oj.train) #YOU HAVE TO DELETE THE BUY
summary(tree.oj)
print("Variables Used:")
print(summary(tree.oj)$used)
paste("Training Error Rate:", summary(tree.oj)$misclass[1]/summary(tree.oj)$misclass[2])
paste("Number of terminal nodes:",summary(tree.oj)$size)
```
###(c) Type in the name of the tree object in order to get a detailed text output. Pick one of the terminal modes, and interpret the information displayed.
If we take 2) as our example, LoyalCH is the splitting variable at 0.504. There are 360 points at this node and the deviance of this region is 400. About 28% of the values at this node are Sales=MM and 72% is Sales=CH
```{r,echo=FALSE}
tree.oj
```
###(d) Create a plot of the tree, and interpret the results
Loyal CH is the most important variable for this tree and is contained in the top 3 nodes of it. If LoyalCH < 0.0491, then the tree will predict MM. If not, then it will depend on other factors such as PriceDiff.
```{r,echo=FALSE, fig.height=7,fig.width=10}
plot(tree.oj)
text(tree.oj,pretty=0)
```
###(e) Predict the response on the test data, and produce a confusion matrix comparing the test labels to the predicted test labels. What is the test error rate?
The test error rate and the confusion matrix are shown below.
```{r, echo=FALSE}
oj.pred = predict(tree.oj,oj.test,type="class")
confusion = table(oj.pred,oj.test$Purchase)
print(confusion)
paste("Test Error Rate:",(confusion[1,2]+confusion[2,1])/ 270)
```
###(f) Apply the cv.tree() function to the training set in order to determine the optimal tree size
The optimal tree size in this case is outputted below.
```{r,echo=T}
cv.oj = cv.tree(tree.oj)
oj.best = cv.oj$size[which.min(cv.oj$dev)]
paste("Best Tree Size:",oj.best)
```
###(g) Produce a plot with tree size on the x-axis and cross-validated classification error rate on the y-axis
```{r,echo=FALSE}
plot(cv.oj$size,cv.oj$dev,type='b', xlab = "Tree Size",ylab="Deviance")
```
###(h) Which tree size corresponding to the lowest cross validated classfication error rate
The tree that gives the lowest CV error is outputted below.
```{r,echo=TRUE}
oj.best = cv.oj$size[which.min(cv.oj$dev)]
paste("Best Tree Size:",oj.best)
```
###(i) Produce a pruned tree corresponding to the optimal tree size obtained using cross-validation. If cross-validation does not lead to selection of a pruned tree, then create a pruned tree with five terminal nodes.
```{r,echo=TRUE}
prune.oj = prune.tree(tree.oj, best=oj.best)
```
###(j) Compare the training error rates between the pruned and unpruned trees. Which is higher?
The pruned training error rate is slightly higher than the unpruned training error rate.
```{r,echo=FALSE}
paste("Pruned Traiing Error Rate:", summary(prune.oj)$misclass[1]/summary(tree.oj)$misclass[2])
paste("Unprune Training Error Rate:", summary(tree.oj)$misclass[1]/summary(tree.oj)$misclass[2])
```
###(k) Compare the test error rates between the pruned and unpruned trees. Which is higher?
The pruned test error rate is slightly higher than the regular test test error rate.
```{r,echo=FALSE}
prune.pred = predict(prune.oj,oj.test,type="class")
confusion2 = table(prune.pred,oj.test$Purchase)
paste("Regular Error Rate:",(confusion[1,2]+confusion[2,1])/ 270)
paste("Prune Error Rate:",(confusion2[1,2]+confusion2[2,1])/ 270)
```
#Chapter 8 Applied 10
###(a) Remove the observations for whom the salary information is unknown, and then log-transform the salaries
```{r, echo=TRUE}
hitters = Hitters
hitters = hitters[!is.na(hitters$Salary),]
hitters$Salary = log(hitters$Salary) #transform salaries to log
```
###(b) Create a training set consisting of the first 200 observations, and a test set consisting of the remaining observations.
```{r, echo=TRUE}
hitters.train = hitters[1:200,] #Take first 200 ast training set
hitters.test = hitters[201:nrow(hitters),] #Take rest as test set
```
###(c) Perform boosting on the training set with 1,000 trees for a range of values of the shrinkage parameter. Produce a plot with different shrinkage values on the x-axis and the corresponding training set MSE on the y-axis.
```{r, echo=FALSE}
set.seed(3)
sequence = seq(-10,-0.2,by=0.1)
sequence = 10^sequence
MSE = c()
for(i in 1:length(sequence)){
boost.hitters = gbm(Salary~., data = hitters.train,
distribution = 'gaussian',
shrinkage=sequence[i],
n.trees=1000)
yhat.boost = predict(boost.hitters,newdata=hitters.train,n.trees=1000)
MSE = c(MSE, mean((yhat.boost-hitters.train$Salary)^2))
}
train.boost = cbind(sequence,MSE)
plot(train.boost, xlab = "Shrinkage", ylab="Train MSE")
```
###(d) Produce a plot with different shrinkage values on the x=axis and the corresponding test MSE on the y-axis
The plot of the test MSE, minimum Test MSE and corresponding lambda value is shown below.
```{r,echo=TRUE}
set.seed(4)
sequence = seq(-10,-0.2,by=0.1)
sequence = 10^sequence
test.MSE = c()
SE = c()
for(i in 1:length(sequence)){
boost.hitters = gbm(Salary~., data = hitters.train,
distribution = 'gaussian',
shrinkage=sequence[i],
n.trees=1000)
yhat.boost = predict(boost.hitters,newdata=hitters.test,n.trees=1000)
test.MSE = c(test.MSE, mean((yhat.boost-hitters.test$Salary)^2))
}
test.boost = cbind(sequence,test.MSE)
plot(test.boost, xlab = "Shrinkage", ylab="Test MSE")
paste("Minimum test Error:",min(test.boost[,2]))
paste("Corresponding Lambda Value:",sequence[which.min(test.boost[,2])])
```
###(e) Compare the test MSE of boosting to the test MSE that results from applying two of the regression approaches seen in Chapters 3 and 6
According to the outputs below, both Linear and Ridge Regression have higher test MSE than the boosting method
**Linear Regression:**
```{r, echo=TRUE}
lm.hitters = lm(Salary~., data = hitters.train)
lm.predict = predict(lm.hitters, newdata = hitters.test)
paste("Linear Regression MSE",mean((lm.predict - hitters.test$Salary)^2))
```
**Ridge Regression:**
```{r, echo=TRUE}
set.seed(4)
ridge.hitters = glmnet(data.matrix(hitters.train[-c(19)]),hitters.train$Salary,alpha=0)
cv.out = cv.glmnet(data.matrix(hitters.train[-c(19)]),hitters.train$Salary,alpha=0)
bestlam=cv.out$lambda.min
ridge.pred = predict(ridge.hitters,s=bestlam,newx = data.matrix(hitters.test[-c(19)]))
paste("Ridge Regression MSE",mean((ridge.pred-hitters.test$Salary)^2))
```
###(f) Which variables appear to be the most important predictors in the boosted model?
CAtBat, CRUns, and CWalks are the most important variables
```{r, echo=FALSE}
important.hitters = gbm(Salary~., data = hitters.train,
distribution = 'gaussian',
shrinkage = sequence[which.min(test.boost[,2])],
n.trees=1000)
summary(important.hitters)
```
###(g) Now apply bagging ot the traiing set. What is the test MSE for this approach?
The bagging test MSE is shown below. It is slightly lower than the best test MSE for Boosting.
```{r}
set.seed(5)
bag.hitters = randomForest(Salary~.,data=hitters.train,mtry=19)
yhat.bag = predict(bag.hitters,newdata=hitters.test)
paste("Bagging Test MSE",mean((yhat.bag-hitters.test$Salary)^2))
```
```{r,echo=T}
set.seed(5)
cv.oj = cv.tree(tree.oj)
oj.best = cv.oj$size[which.min(cv.oj$dev)]
paste("Best Tree Size:",oj.best)
```
set.seed(5)
cv.oj = cv.tree(tree.oj)
oj.best = cv.oj$size[which.min(cv.oj$dev)]
paste("Best Tree Size:",oj.best)
```
###(g) Produce a plot with tree size on the x-axis and cross-validated classification error rate on the y-axis
```{r,echo=FALSE}
plot(cv.oj$size,cv.oj$dev,type='b', xlab = "Tree Size",ylab="Deviance")
```
###(h) Which tree size corresponding to the lowest cross validated classfication error rate
The tree that gives the lowest CV error is outputted below.
```{r,echo=TRUE}
oj.best = cv.oj$size[which.min(cv.oj$dev)]
paste("Best Tree Size:",oj.best)
```
###(i) Produce a pruned tree corresponding to the optimal tree size obtained using cross-validation. If cross-validation does not lead to selection of a pruned tree, then create a pruned tree with five terminal nodes.
```{r,echo=TRUE}
prune.oj = prune.tree(tree.oj, best=oj.best)
```
###(j) Compare the training error rates between the pruned and unpruned trees. Which is higher?
The pruned training error rate is slightly higher than the unpruned training error rate.
```{r,echo=FALSE}
paste("Pruned Traiing Error Rate:", summary(prune.oj)$misclass[1]/summary(tree.oj)$misclass[2])
paste("Unprune Training Error Rate:", summary(tree.oj)$misclass[1]/summary(tree.oj)$misclass[2])
cv.oj = cv.tree(tree.oj)
oj.best = cv.oj$size[which.min(cv.oj$dev)]
paste("Best Tree Size:",oj.best)
```
###(g) Produce a plot with tree size on the x-axis and cross-validated classification error rate on the y-axis
```{r,echo=FALSE}
plot(cv.oj$size,cv.oj$dev,type='b', xlab = "Tree Size",ylab="Deviance")
```
###(h) Which tree size corresponding to the lowest cross validated classfication error rate
The tree that gives the lowest CV error is outputted below.
```{r,echo=TRUE}
oj.best = cv.oj$size[which.min(cv.oj$dev)]
paste("Best Tree Size:",oj.best)
```
###(i) Produce a pruned tree corresponding to the optimal tree size obtained using cross-validation. If cross-validation does not lead to selection of a pruned tree, then create a pruned tree with five terminal nodes.
```{r,echo=TRUE}
prune.oj = prune.tree(tree.oj, best=oj.best)
paste("Pruned Traiing Error Rate:", summary(prune.oj)$misclass[1]/summary(tree.oj)$misclass[2])
paste("Unprune Training Error Rate:", summary(tree.oj)$misclass[1]/summary(tree.oj)$misclass[2])
tree.oj = tree(Purchase~.,data = oj.train) #YOU HAVE TO DELETE THE BUY
summary(tree.oj)
print("Variables Used:")
print(summary(tree.oj)$used)
paste("Training Error Rate:", summary(tree.oj)$misclass[1]/summary(tree.oj)$misclass[2])
paste("Number of terminal nodes:",summary(tree.oj)$size)
oj.pred = predict(tree.oj,oj.test,type="class")
confusion = table(oj.pred,oj.test$Purchase)
print(confusion)
paste("Test Error Rate:",(confusion[1,2]+confusion[2,1])/ 270)
cv.oj = cv.tree(tree.oj)
oj.best = cv.oj$size[which.min(cv.oj$dev)]
paste("Best Tree Size:",oj.best)
set.seed(5)
cv.oj = cv.tree(tree.oj)
oj.best = cv.oj$size[which.min(cv.oj$dev)]
paste("Best Tree Size:",oj.best)
set.seed(6)
cv.oj = cv.tree(tree.oj)
oj.best = cv.oj$size[which.min(cv.oj$dev)]
paste("Best Tree Size:",oj.best)
```
set.seed(7)
cv.oj = cv.tree(tree.oj)
oj.best = cv.oj$size[which.min(cv.oj$dev)]
paste("Best Tree Size:",oj.best)
set.seed(8)
cv.oj = cv.tree(tree.oj)
oj.best = cv.oj$size[which.min(cv.oj$dev)]
paste("Best Tree Size:",oj.best)
cv.oj = cv.tree(tree.oj)
oj.best = cv.oj$size[which.min(cv.oj$dev)]
paste("Best Tree Size:",oj.best)
cv.oj = cv.tree(tree.oj)
oj.best = cv.oj$size[which.min(cv.oj$dev)]
paste("Best Tree Size:",oj.best)
cv.oj = cv.tree(tree.oj)
oj.best = cv.oj$size[which.min(cv.oj$dev)]
paste("Best Tree Size:",oj.best)
cv.oj = cv.tree(tree.oj)
oj.best = cv.oj$size[which.min(cv.oj$dev)]
paste("Best Tree Size:",oj.best)
cv.oj = cv.tree(tree.oj)
oj.best = cv.oj$size[which.min(cv.oj$dev)]
paste("Best Tree Size:",oj.best)
cv.oj = cv.tree(tree.oj)
oj.best = cv.oj$size[which.min(cv.oj$dev)]
paste("Best Tree Size:",oj.best)
cv.oj = cv.tree(tree.oj)
oj.best = cv.oj$size[which.min(cv.oj$dev)]
paste("Best Tree Size:",oj.best)
cv.oj = cv.tree(tree.oj)
oj.best = cv.oj$size[which.min(cv.oj$dev)]
paste("Best Tree Size:",oj.best)
cv.oj = cv.tree(tree.oj)
oj.best = cv.oj$size[which.min(cv.oj$dev)]
paste("Best Tree Size:",oj.best)
cv.oj = cv.tree(tree.oj)
oj.best = cv.oj$size[which.min(cv.oj$dev)]
paste("Best Tree Size:",oj.best)
cv.oj = cv.tree(tree.oj)
oj.best = cv.oj$size[which.min(cv.oj$dev)]
paste("Best Tree Size:",oj.best)
cv.oj = cv.tree(tree.oj)
oj.best = cv.oj$size[which.min(cv.oj$dev)]
paste("Best Tree Size:",oj.best)
set.seed(5)
cv.oj = cv.tree(tree.oj)
oj.best = cv.oj$size[which.min(cv.oj$dev)]
paste("Best Tree Size:",oj.best)
set.seed(5)
cv.oj = cv.tree(tree.oj)
oj.best = cv.oj$size[which.min(cv.oj$dev)]
paste("Best Tree Size:",oj.best)
set.seed(10)
cv.oj = cv.tree(tree.oj)
oj.best = cv.oj$size[which.min(cv.oj$dev)]
paste("Best Tree Size:",oj.best)
set.seed(11)
cv.oj = cv.tree(tree.oj)
oj.best = cv.oj$size[which.min(cv.oj$dev)]
paste("Best Tree Size:",oj.best)
set.seed(12)
cv.oj = cv.tree(tree.oj)
oj.best = cv.oj$size[which.min(cv.oj$dev)]
paste("Best Tree Size:",oj.best)
set.seed(13)
cv.oj = cv.tree(tree.oj)
oj.best = cv.oj$size[which.min(cv.oj$dev)]
paste("Best Tree Size:",oj.best)
plot(cv.oj$size,cv.oj$dev,type='b', xlab = "Tree Size",ylab="Deviance")
```
###(h) Which tree size corresponding to the lowest cross validated classfication error rate
The tree that gives the lowest CV error is outputted below.
```{r,echo=TRUE}
oj.best = cv.oj$size[which.min(cv.oj$dev)]
paste("Best Tree Size:",oj.best)
```
###(i) Produce a pruned tree corresponding to the optimal tree size obtained using cross-validation. If cross-validation does not lead to selection of a pruned tree, then create a pruned tree with five terminal nodes.
```{r,echo=TRUE}
prune.oj = prune.tree(tree.oj, best=oj.best)
paste("Pruned Traiing Error Rate:", summary(prune.oj)$misclass[1]/summary(tree.oj)$misclass[2])
paste("Unprune Training Error Rate:", summary(tree.oj)$misclass[1]/summary(tree.oj)$misclass[2])
```
set.seed(2)
oj = OJ
oj.subset = sample(1:1070, 800)
oj.train = oj[oj.subset,]
oj.test = oj[-oj.subset,]
```
###(b) Fit a tree to the training data, with Purchase as the response and the other vaiables except for Buy as predictors. Use the summary() function to produce summary statistics about the tree, and describe the results obtained. What ist he training error rate? How many terminal nodes does the tree have?
Below you can see the summary statistics, variables used, training error rate, and number of terminal nodes.
```{r, echo=FALSE}
tree.oj = tree(Purchase~.,data = oj.train) #YOU HAVE TO DELETE THE BUY
summary(tree.oj)
print("Variables Used:")
print(summary(tree.oj)$used)
paste("Training Error Rate:", summary(tree.oj)$misclass[1]/summary(tree.oj)$misclass[2])
paste("Number of terminal nodes:",summary(tree.oj)$size)
```
###(c) Type in the name of the tree object in order to get a detailed text output. Pick one of the terminal modes, and interpret the information displayed.
If we take 2) as our example, LoyalCH is the splitting variable at 0.504. There are 360 points at this node and the deviance of this region is 400. About 28% of the values at this node are Sales=MM and 72% is Sales=CH
```{r,echo=FALSE}
tree.oj
```
###(d) Create a plot of the tree, and interpret the results
Loyal CH is the most important variable for this tree and is contained in the top 3 nodes of it. If LoyalCH < 0.0491, then the tree will predict MM. If not, then it will depend on other factors such as PriceDiff.
```{r,echo=FALSE, fig.height=7,fig.width=10}
plot(tree.oj)
text(tree.oj,pretty=0)
```
###(e) Predict the response on the test data, and produce a confusion matrix comparing the test labels to the predicted test labels. What is the test error rate?
The test error rate and the confusion matrix are shown below.
```{r, echo=FALSE}
oj.pred = predict(tree.oj,oj.test,type="class")
confusion = table(oj.pred,oj.test$Purchase)
print(confusion)
paste("Test Error Rate:",(confusion[1,2]+confusion[2,1])/ 270)
```
###(f) Apply the cv.tree() function to the training set in order to determine the optimal tree size
The optimal tree size in this case is outputted below.
```{r,echo=T}
set.seed(13)
cv.oj = cv.tree(tree.oj)
oj.best = cv.oj$size[which.min(cv.oj$dev)]
paste("Best Tree Size:",oj.best)
```
###(g) Produce a plot with tree size on the x-axis and cross-validated classification error rate on the y-axis
```{r,echo=FALSE}
plot(cv.oj$size,cv.oj$dev,type='b', xlab = "Tree Size",ylab="Deviance")
```
###(h) Which tree size corresponding to the lowest cross validated classfication error rate
The tree that gives the lowest CV error is outputted below.
```{r,echo=TRUE}
oj.best = cv.oj$size[which.min(cv.oj$dev)]
paste("Best Tree Size:",oj.best)
```
###(i) Produce a pruned tree corresponding to the optimal tree size obtained using cross-validation. If cross-validation does not lead to selection of a pruned tree, then create a pruned tree with five terminal nodes.
```{r,echo=TRUE}
prune.oj = prune.tree(tree.oj, best=oj.best)
```
###(j) Compare the training error rates between the pruned and unpruned trees. Which is higher?
The pruned training error rate is slightly higher than the unpruned training error rate.
```{r,echo=FALSE}
paste("Pruned Traiing Error Rate:", summary(prune.oj)$misclass[1]/summary(tree.oj)$misclass[2])
paste("Unprune Training Error Rate:", summary(tree.oj)$misclass[1]/summary(tree.oj)$misclass[2])
oj.best = cv.oj$size[which.min(cv.oj$dev)]
paste("Best Tree Size:",oj.best)
oj.best = cv.oj$size[which.min(cv.oj$dev)]
paste("Best Tree Size:",oj.best)
prune.oj = prune.tree(tree.oj, best=oj.best)
paste("Pruned Traiing Error Rate:", summary(prune.oj)$misclass[1]/summary(tree.oj)$misclass[2])
paste("Unprune Training Error Rate:", summary(tree.oj)$misclass[1]/summary(tree.oj)$misclass[2])
prune.oj = prune.tree(tree.oj, best=7)
paste("Pruned Traiing Error Rate:", summary(prune.oj)$misclass[1]/summary(tree.oj)$misclass[2])
paste("Unprune Training Error Rate:", summary(tree.oj)$misclass[1]/summary(tree.oj)$misclass[2])
prune.oj = prune.tree(tree.oj, best=6)
paste("Pruned Traiing Error Rate:", summary(prune.oj)$misclass[1]/summary(tree.oj)$misclass[2])
paste("Unprune Training Error Rate:", summary(tree.oj)$misclass[1]/summary(tree.oj)$misclass[2])
prune.oj = prune.tree(tree.oj, best=8)
paste("Pruned Traiing Error Rate:", summary(prune.oj)$misclass[1]/summary(tree.oj)$misclass[2])
paste("Unprune Training Error Rate:", summary(tree.oj)$misclass[1]/summary(tree.oj)$misclass[2])
prune.oj = prune.tree(tree.oj, best=7)
paste("Pruned Traiing Error Rate:", summary(prune.oj)$misclass[1]/summary(tree.oj)$misclass[2])
paste("Unprune Training Error Rate:", summary(tree.oj)$misclass[1]/summary(tree.oj)$misclass[2])
```{r,echo=FALSE}
prune.pred = predict(prune.oj,oj.test,type="class")
confusion2 = table(prune.pred,oj.test$Purchase)
paste("Regular Error Rate:",(confusion[1,2]+confusion[2,1])/ 270)
paste("Prune Error Rate:",(confusion2[1,2]+confusion2[2,1])/ 270)
prune.pred = predict(prune.oj,oj.test,type="class")
confusion2 = table(prune.pred,oj.test$Purchase)
paste("Regular Error Rate:",(confusion[1,2]+confusion[2,1])/ 270)
paste("Prune Error Rate:",(confusion2[1,2]+confusion2[2,1])/ 270)
data = read.cst("Desktop/test.csv")
data = read.csv("Desktop/test.csv")
db = dbConnect(SQLite(), dbname ="Desktop/NBA.db")
library('rvest')
library('dplyr')
library('pipeR')
library('RSQLite')
db = dbConnect(SQLite(), dbname ="Desktop/NBA.db")
dbListTables
dbListTables()
dbListTables(db)
dbListFields(db,'fantasyData')
install.packages("devtools")
library(RmySQL)
install.packages("RMySQL")
library(RMySQL)
?dbConnect
mydb = dbConnect(MySQL(), user='hudagawa', password='Ehjxm66xqDHNFSTD',
dbname='efang', host='punxsutawney.smartzip-services.com')
install.packages('rvest')
food = html('http://cal.spoonuniversity.com/eat-out/43-eats-you-must-try-in-berkeley-before-you-die/')
library(rvest)
food = html('http://cal.spoonuniversity.com/eat-out/43-eats-you-must-try-in-berkeley-before-you-die/')
nodes = html_nodes(x=food, css='h3')
nodes
html_text(nodes,trim=T)
html_text(nodes,trim=T)[1:43]
write.csv(html_text(nodes,trim=T)[1:43], "Desktop/joy.csv")
print('hello')
install.packages("randomForest")
install.packages("neuralnet")
install.packages("Matrix")
install.packages("ggplot2")
y = c(1,2,3)
x = y
x
y[1] =3
y
x
install.packages("roxygen2")
setwd("~/GitHub/SimHaz")
library(reshape2)
library(roxygen2)
namespace_roclet)_
namespace_roclet()
getwd()
devtools::document()
library(devtools)
install.packages("devtools")
devtools::document()
ls
setwd("~/GitHub/SimHaz/SimHaz")
devtools::document()
devtools::document()
getwd()
pwd()
cw()
cwd()
setwd("~/GitHub/SimHaz/SimHaz")
devtools::document()
devtools::document()
setwd("~/GitHub/SimHaz")
install.packages('SimHaz_0.1.tar.gz')
install.packages('SimHaz_0.1.tar.gz'\)
install.packages('SimHaz_0.1.tar.gz')
install.packages('SimHaz_0.1.tar.gz', type='source')
install.packages('./SimHaz_0.1.tar.gz')
setwd("~/GitHub/SimHaz")
install.packages('./SimHaz_0.1.tar.gz', type='source')
install.packages('./SimHaz_0.1.tar.gz', repos=NULL, type='source')
library(SimHaz)
library("SimHaz", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library(SimHaz)
?getpower.clst
?getpower.clst
?getpower.method1
