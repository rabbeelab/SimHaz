
R version 3.2.2 (2015-08-14) -- "Fire Safety"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "SimHaz"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('SimHaz')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("SimHaz-package")
> ### * SimHaz-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimHaz-package
> ### Title: Simulated Survival and Hazard Analysis for time-dependent
> ### Aliases: SimHaz-package SimHaz
> 
> ### ** Examples
> 
> # Simulate a dataset of 600 subjects with time-dependent exposure without
> # considering minimum follow-up time or minimum post-exposure follow-up time.
> # Specifically, set the duration of the study to be 24 months; the median time to
> # event for control group to be 24 months; exposure effect to be 0.3; median time
> # to censoring to be 14 months; and exposure proportion to be 20%.
> 
> df1 <- tdSim.method1(N = 600, duration = 24, lambda = log(2)/24, rho = 1, 
+    beta = 0.3, rateC = log(2)/14, exp.prop = 0.2, 
+    prop.fullexp  = 0, maxrelexptime = 1, min.futime = 0,
+    min.postexp.futime = 0)
>    
> # We recommend setting nSim to at least 500. It is set to 10 in the example to
> # reduce run time for CRAN submission.
> 
> ret <- getpower.method1(nSim = 10, N = 600, b = 0.3, exp.prop = 0.2, 
+ 	type = "td", scenario = " ", maxrelexptime = 1/6, min.futime = 4,
+ 	min.postexp.futime = 4, output.fn = "output.csv")
> 
> 
> 
> 
> cleanEx()
> nameEx("getpower.exp.matching")
> ### * getpower.exp.matching
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getpower.exp.matching
> ### Title: Calculate power for the Cox proportional hazard model with
> ###   time-dependent exposure using method 1
> ### Aliases: getpower.exp.matching
> ### Keywords: Power_Calculation
> 
> ### ** Examples
> 
> # Install the survival package if needed.
> 
> library(survival)
> 
> # We recommend setting nSim to at least 500. It is set to 10 in the example to
> # reduce run time for CRAN submission.
> 
> # Run 10 simulations. Each time simulate a dataset of 600 subjects with
> # time-dependent exposure with both minimum follow-up time (4 months) and
> # minimum post-exposure follow-up time (4 months) imposed. Also consider a
> # quick exposure after entering the study for each exposed subject. Set the
> # maximum relative exposure time to be 1/6. 
> 
> # Set the duration of the study to be 24 months; the median time to event for
> # control group to be 24 months; exposure effect to be 0.3; median time to
> # censoring to be 14 months; and exposure proportion to be 20%.
> 
> marginal = getpower.exp.matching(nSim=10, N_match=100,duration=24,
+ 	med.TTE.Control=24,rho=1, med.TimeToCensor=14, beta=0.7,
+ 	matching.ratio=3,type="td", scenario="exposure_matching",  
+ 	method="marginal", prop.fullexp=0,maxrelexptime=1,
+ 	min.futime=0, min.postexp.futime=0, output.fn="result_matching",
+ 	simu.plot=FALSE)
> 
> 
> 
> 
> cleanEx()

detaching ‘package:survival’

> nameEx("getpower.exp.matching.opt")
> ### * getpower.exp.matching.opt
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getpower.exp.matching.opt
> ### Title: Calculate power for the Cox proportional hazard model with
> ###   time-dependent exposure using method 1
> ### Aliases: getpower.exp.matching.opt
> ### Keywords: Power_Calculation
> 
> ### ** Examples
> 
> # Install the survival package if needed.
> 
> library(survival)
> 
> # We recommend setting nSim to at least 500. It is set to 10 in the example to
> # reduce run time for CRAN submission.
> 
> # Run 10 simulations. Each time simulate a dataset of 600 subjects with
> # time-dependent exposure with both minimum follow-up time (4 months) and
> # minimum post-exposure follow-up time (4 months) imposed. Also consider a
> # quick exposure after entering the study for each exposed subject. Set the
> # maximum relative exposure time to be 1/6. 
> 
> # Set the duration of the study to be 24 months; the median time to event for
> # control group to be 24 months; exposure effect to be 0.3; median time to
> # censoring to be 14 months; and exposure proportion to be 20%.
> 
> marginal = getpower.exp.matching.opt(nSim=50, N=400, duration=24, med.TTE.Control=24, rho=1,med.TimeToCensor=14,beta=0.5,
+ exp.prop=0.3, type="td",scenario="opt_exp_matching", method="marginal",
+ prop.fullexp=0,maxrelexptime=1,min.futime=0,min.postexp.futime=0,
+                                 output.fn="opt_matching",simu.plot=FALSE)
[1] 1
[1] 0.25
[1] 0.333
[1] 0.5
[1] 2
[1] 3
[1] 4
[1] 5
> 
> 
> 
> 
> cleanEx()

detaching ‘package:survival’

> nameEx("getpower.method1")
> ### * getpower.method1
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getpower.method1
> ### Title: Calculate power for the Cox proportional hazard model with
> ###   time-dependent exposure using method 1
> ### Aliases: getpower.method1
> ### Keywords: Power_Calculation
> 
> ### ** Examples
> 
> # Install the survival package if needed.
> 
> library(survival)
> 
> # We recommend setting nSim to at least 500. It is set to 10 in the example to
> # reduce run time for CRAN submission.
> 
> # Run 10 simulations. Each time simulate a dataset of 600 subjects with
> # time-dependent exposure with both minimum follow-up time (4 months) and
> # minimum post-exposure follow-up time (4 months) imposed. Also consider a
> # quick exposure after entering the study for each exposed subject. Set the
> # maximum relative exposure time to be 1/6. 
> 
> # Set the duration of the study to be 24 months; the median time to event for
> # control group to be 24 months; exposure effect to be 0.3; median time to
> # censoring to be 14 months; and exposure proportion to be 20%.
> 
> 
> ret <- getpower.method1(nSim = 10, N = 600, b = 0.3, exp.prop = 0.2,
+     type = "td", scenario = " ", maxrelexptime = 1/6, min.futime = 4,
+     min.postexp.futime = 4, output.fn = "output.csv")
> 
> 
> 
> 
> cleanEx()

detaching ‘package:survival’

> nameEx("getpower.method2")
> ### * getpower.method2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getpower.method2
> ### Title: Calculate power for the Cox proportional hazard model with
> ###   time-dependent exposure using method 2
> ### Aliases: getpower.method2
> ### Keywords: Power_Calculation
> 
> ### ** Examples
> 
> # We recommend setting nSim to at least 500. It is set to 10 in the example to
> # reduce run time for CRAN submission.
> 
> # Run 10 simulations. Each time simulate a dataset of 600 subjects
> 
> ret <- getpower.method2(nSim=10, N=600, duration=24, scenario="test",
+   lambda12=1.3, lambda23=0.04, lambda13=0.03, HR=NULL,exp.prop=0.2, rateC=0.05,
+   min.futime=4, min.postexp.futime=4,output.fn="database.csv", simu.plot=FALSE) 
> 
> 
> 
> cleanEx()
> nameEx("getpower.multicenter")
> ### * getpower.multicenter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getpower.multicenter
> ### Title: Calculate power for the Cox proportional hazard model with
> ###   time-dependent exposure and multiple centers using method1
> ### Aliases: getpower.multicenter
> ### Keywords: Power_Calculation
> 
> ### ** Examples
> 
> # We recommend setting nSim to at least 500. It is set to 10 in the example to
> # reduce run time for CRAN submission.
> 
> # Run 10 simulations. Each time simulate a dataset of 300 subjects
> 
> input_df1 <- data.frame(cat_id = c("low","med","high"), center.size = rep(100,3), 
+                         cat_exp.prop = rep(1/3, 3),
+                         med.TTE.Control=c(14,20,31))
> 
> df_strat <- getpower.multicenter(nSim = 10, N = 300, beta = 0.7, 
+ 								 df = input_df1,method="strata",  type = "td", 
+ 								 scenario = "strata", maxrelexptime = 1/6, 
+ 								 min.futime = 4, min.postexp.futime = 4, 
+ 								 output.fn = "output_mult1.csv")
> 	
> 
> 
> 
> cleanEx()
> nameEx("plot_power")
> ### * plot_power
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_power
> ### Title: Plot power curves for survival analysis with time-dependent
> ###   exposure
> ### Aliases: plot_power
> ### Keywords: Plot
> 
> ### ** Examples
> 
> # We recommend setting nSim to at least 500. It is set to 10 in the example to
> # reduce run time for CRAN submission.
> 
> ret <- getpower.method1(nSim = 10, N = 600, b = 0.3, exp.prop = 0.2, 
+     type = "td", scenario =  " ", maxrelexptime = 1/6, min.futime = 4, 
+     min.postexp.futime = 4, output.fn = "output.csv")
> 	
> ret2 <- getpower.method1(nSim = 10, N = 600, b = 0.3, exp.prop = 0.2, 
+     type = "td", scenario = " ", maxrelexptime = 1/6, min.futime = 4, 
+     min.postexp.futime = 0, output.fn ="output.csv")
> 	
> # Read in .csv file as a data frame
> 
> tb <-  read.csv("output.csv", header = TRUE, sep = ",")
> 
> 	# Visualize the subsetted data frame of interest and create a new plot
> 
> visualize1 <- plot_power(table_df = tb, N = 600, type = "td", exp.prop = 0.2,
+     min.futime = 4, min.postexp.futime = 4, show.plot = TRUE, newplot = TRUE,
+     col = "red", lty = 1, lwd = 2, pch = 16)
> 
> # Add a different power curve to the previously created plot
> 
> visualize2 <- plot_power(table_df = tb, N = 600, type = "td", exp.prop=0.2, 
+     min.futime = 4, min.postexp.futime = 0, show.plot = TRUE, newplot = FALSE,
+     col = "blue", lty = 1, lwd = 2, pch = 16)
> 
> 
> 
> cleanEx()
> nameEx("plot_simuData")
> ### * plot_simuData
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_simuData
> ### Title: Make an incidence plot from simulated data.
> ### Aliases: plot_simuData
> ### Keywords: Plot
> 
> ### ** Examples
> 
> dat <- tdSim.method2(500, duration=24,lambda12=1.3,lambda23=0.04, 
+     lambda13=0.03, exp.prop=0.2,rateC=0.05, min.futime=4, min.postexp.futime=4)
> 	
> plot_simuData(dat, title='method2_filter')
> 
> 
> 
> cleanEx()
> nameEx("tdSim.exp.matching")
> ### * tdSim.exp.matching
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tdSim.exp.matching
> ### Title: Simulate 1 dataframe (1 simulation) of time-dep exposure under
> ###   method 2
> ### Aliases: tdSim.exp.matching
> ### Keywords: Simulation
> 
> ### ** Examples
> 
> 
> 
> df1 = tdSim.exp.matching<-function(N_match, duration=24,lambda, rho=1, 
+ 	beta, rateC,matching.ratio=3,  prop.fullexp=0,maxrelexptime=1,min.futime=0,
+ 	min.postexp.futime=0)
+ 
+ 
+ 
+ 
+ cleanEx()
> nameEx("tdSim.method1")
> ### * tdSim.method1
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tdSim.method1
> ### Title: Simulate 1 dataframe (1 simulation) of time-dep exposure under
> ###   method 1
> ### Aliases: tdSim.method1
> ### Keywords: Simulation
> 
> ### ** Examples
> 
> # Simulate a dataset of 600 subjects with time-dependent exposure without
> # considering minimum follow-up time or minimum post-exposure follow-up time.
> # Specifically, set the duration of the study to be 24 months; the median time to
> # event for control group to be 24 months; exposure effect to be 0.3; median time
> # to censoring to be 14 months; and exposure proportion to be 20%.
> 
> df1 <- tdSim.method1(N = 600, duration = 24, lambda = log(2)/24, rho = 1, 
+    beta = 0.3, rateC = log(2)/14, exp.prop = 0.2, prop.fullexp  = 0, 
+    maxrelexptime = 1, min.fut = 0, min.postexp.fut = 0)
> 
> # Simulate a dataset of 600 subjects with time-dependent exposure with
> # both minimum follow-up time (4 months) and minimum post-exposure
> # follow-up time (4 months) imposed. Other parameters remain the same as
> # in the first case.
> 
> df2 <- tdSim.method1(N = 600, duration = 24, lambda = log(2)/24, rho = 1, 
+    beta = 0.3, rateC = log(2)/14, exp.prop = 0.2, prop.fullexp  = 0, 
+    maxrelexptime = 1, min.fut = 4, min.postexp.fut = 4)
> 
> # Simulate a dataset of 600 subjects with time-dependent exposure with
> # both minimum follow-up time (4 months) and minimum post-exposure
> # follow-up time (4 months) imposed. Also consider a quick exposure after
> # entering the study for each exposed subject. Set the maximum relative
> # exposure time to be 1/6. Other parameters remain the same as in the first case.
> 
> df3 <- tdSim.method1(N = 600, duration = 24, lambda = log(2)/24, rho = 1, 
+    beta = 0.3, rateC = log(2)/14, exp.prop = 0.2, prop.fullexp  = 0,
+    maxrelexptime = 1/6, min.fut = 4,min.postexp.fut = 4)
> 
> 
> 
> cleanEx()
> nameEx("tdSim.method2")
> ### * tdSim.method2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tdSim.method2
> ### Title: Simulate 1 dataframe (1 simulation) of time-dep exposure under
> ###   method 2
> ### Aliases: tdSim.method2
> ### Keywords: Simulation
> 
> ### ** Examples
> 
> sim_data <- tdSim.method2(500, duration=24,lambda12=1.3,lambda23=0.04, 
+     lambda13=0.03, exp.prop=0.2,rateC=0.05, min.futime=4, min.postexp.futime=4)
> 
> 
> 
> cleanEx()
> nameEx("tdSim.multicenter")
> ### * tdSim.multicenter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tdSim.multicenter
> ### Title: Simulate 1 dataframe (1 simulation) of time-dependent exposure
> ###   with multiple centers
> ### Aliases: tdSim.multicenter
> ### Keywords: Simulation
> 
> ### ** Examples
> 
> # Create a clustering data frame as input with 3 categories and a 20% weighted
> # exposure proportion.
>   
> input_df1 <- data.frame(cat_id = c("low","med","high"), 
+ 						center.size = rep(100,3),  
+ 						cat_exp.prop = rep(1/3, 3), 
+ 						med.TTE.Control=c(14,20,31))
> 
> # Simulate a dataset of 600 subjects with time-dependent exposure. Consider
> # both minimum follow-up time (4 months) and minimum post-exposure follow-up
> # time (4 months). Also consider a quick exposure after entering the study for
> # each exposed subject. Set the maximum relative exposure time to be 1/6. 
> 
> # Set the duration of the study to be 24 months; the median time to event for
> # control group to be 24 months; exposure effect to be 0.3; median time to
> # censoring to be 14 months.
> 
> df_strat <- tdSim.multicenter(N = 300, duration =24, rateC = log(2)/14, beta = 0.7, 
+ 	df = input_df1, maxrelexptime = 1/6, min.futime = 4, min.postexp.futime = 4)
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  46.72 2.224 49.208 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
