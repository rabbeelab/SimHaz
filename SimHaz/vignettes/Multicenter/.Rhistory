final = readRDS('intro_final.Rds')
final = readRDS('intro_final.Rd')
final = readRDS('intro_final2.Rd')
final = readRDS('intro_final.Rds')
final = readRDS('intro_final.Rds')
final_table = final[final$i_beta=='0.3',]
kable(final_table[c(4,1,5,2,6,3),c(2,3,13,14,18,19,20)],caption="Simulation results for scenario 1 - exposure time generated from Uniform(0, follow-up time/6), no minimum follow-up time is considered",row.names = F, col.names = c('Type','Sample Size',"Beta hat",'Hazard ratio','Median Survival-Unexposed','Median Survival-Exposed','Power'), align = 'c', digits = c(1,3,3,3,3,3,3))
if(!file.exists("intro_final3.Rds")) {
final = data.frame()
for (b in seq(0.1,0.6,0.1)){
final = rbind(final,getpower.method1(nSim=500, N=600, med.TTE.Control =24, beta=b, exp.prop=0.2, type='td', scenario='method1_filter', maxrelexptime=1/6, min.futime = 4, min.postexp.futime = 4),
getpower.method1(nSim=500, N=800, med.TTE.Control=24, beta=b, exp.prop=0.2, type='td', scenario='method1_filter', maxrelexptime=1/6, min.futime = 4, min.postexp.futime = 4),
getpower.method1(nSim=500, N=1000, med.TTE.Control=24, beta=b, exp.prop=0.2, type='td', scenario='method1_filter', maxrelexptime=1/6, min.futime = 4, min.postexp.futime = 4))
}
saveRDS(final, file="intro_final3.Rds")
}
if(!file.exists("intro_final4.Rds")) {
final2 = data.frame()
for (b in seq(0.1,0.6,0.1)){
lambda23 = lambda*exp(b)
lambda12 = lambda23*45
final2 = rbind(final2, getpower.method2(nSim=500, N=600, duration=24, exp.prop=0.2, rateC=rateC, scenario='method2_filter', lambda12=lambda12, lambda23=lambda23, lambda13=lambda, min.futime=4,min.postexp.futime = 4),
getpower.method2(nSim=500, N=800, duration=24, exp.prop=0.2, rateC=rateC, scenario='method2_filter', lambda12=lambda12, lambda23=lambda23, lambda13=lambda, min.futime=4,min.postexp.futime = 4),
getpower.method2(nSim=500,N=1000, duration=24, exp.prop=0.2, rateC=rateC, scenario='method2_filter', lambda12=lambda12, lambda23=lambda23, lambda13=lambda, min.futime=4,min.postexp.futime = 4))
}
saveRDS(final2, file="intro_final4.Rds")
}
if(!file.exists("intro_final3.Rds")) {
final = data.frame()
for (b in seq(0.1,0.6,0.1)){
final = rbind(final,getpower.method1(nSim=500, N=600, med.TTE.Control =24, beta=b, exp.prop=0.2, type='td', scenario='method1_filter', maxrelexptime=1/6, min.futime = 4, min.postexp.futime = 4),
getpower.method1(nSim=500, N=800, med.TTE.Control=24, beta=b, exp.prop=0.2, type='td', scenario='method1_filter', maxrelexptime=1/6, min.futime = 4, min.postexp.futime = 4),
getpower.method1(nSim=500, N=1000, med.TTE.Control=24, beta=b, exp.prop=0.2, type='td', scenario='method1_filter', maxrelexptime=1/6, min.futime = 4, min.postexp.futime = 4))
}
saveRDS(final, file="intro_final3.Rds")
}
if(!file.exists("intro_final4.Rds")) {
final2 = data.frame()
for (b in seq(0.1,0.6,0.1)){
lambda23 = lambda*exp(b)
lambda12 = lambda23*45
final2 = rbind(final2, getpower.method2(nSim=500, N=600, duration=24, exp.prop=0.2, rateC=rateC, scenario='method2_filter', lambda12=lambda12, lambda23=lambda23, lambda13=lambda, min.futime=4,min.postexp.futime = 4),
getpower.method2(nSim=500, N=800, duration=24, exp.prop=0.2, rateC=rateC, scenario='method2_filter', lambda12=lambda12, lambda23=lambda23, lambda13=lambda, min.futime=4,min.postexp.futime = 4),
getpower.method2(nSim=500,N=1000, duration=24, exp.prop=0.2, rateC=rateC, scenario='method2_filter', lambda12=lambda12, lambda23=lambda23, lambda13=lambda, min.futime=4,min.postexp.futime = 4))
}
saveRDS(final2, file="intro_final4.Rds")
}
table1 = readRDS(file = 'matching_final1.Rds')
table1 = readRDS(file = 'matching_final1.Rds')
setwd("~/GitHub/SimHaz/SimHaz/vignettes/Multicenter")
